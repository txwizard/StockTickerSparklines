<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BTN_LBL_HISTORY" xml:space="preserve">
    <value>Get History</value>
  </data>
  <data name="BTN_LBL_PRUNE" xml:space="preserve">
    <value>Prune Selections</value>
  </data>
  <data name="BTN_LBL_RESET" xml:space="preserve">
    <value>Reset Form</value>
  </data>
  <data name="BTN_LBL_SEARCH" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="ERRMSG_CORRUPTED_EMBBEDDED_RESOURCE_LABEL" xml:space="preserve">
    <value>The label row of internal resource {0} is invalid.{3}    Expected value = {1}{3}    Actual value   = {2}</value>
    <comment>The private LoadMap routine in the StockTickerEngine singleton uses this message to report a corrupted label row in its internal resource file.</comment>
  </data>
  <data name="ERRMSG_CORRUPTED_EMBEDDED_RESOURCE_DETAIL" xml:space="preserve">
    <value>Detail record {0} of internal resource {1} is invalid.{5}    Expected field count = {2}{5}    Actual field count   = {3}{5}    Actual record        = {4}</value>
    <comment>The private LoadMap routine in the StockTickerEngine singleton uses this message to report a corrupted label row in its internal resource file.</comment>
  </data>
  <data name="ERRMSG_SERVER_ERROR_REPORT" xml:space="preserve">
    <value>Stock Quote Server Error: Message     = {0}{3}                          Endpoint    = {1}{3}                          QueryString = {2}</value>
    <comment>Method StockTickerEngine.GetSymbols uses this template to report when the REST API returns an error message as its response.</comment>
  </data>
  <data name="ERRMSG_WINMAIN_EXCEPTION" xml:space="preserve">
    <value>An {0} Exception arose. Details follow.{5}{5}                        Message             = {1}{5}                        TargetSite (Method) = {2}{5}                        Source (Assembly)   = {3}{5}                        StackTrace          = {4}</value>
    <comment>The code behind the MinWindow form constructs exception reports for the trace logger from this template.</comment>
  </data>
  <data name="MSG_ARE_YOU_SURE" xml:space="preserve">
    <value>Are you sure?</value>
  </data>
  <data name="MSG_ENTER_SEARCH_STRING" xml:space="preserve">
    <value>Enter search string.</value>
    <comment>Prompt to display on form after reset</comment>
  </data>
  <data name="MSG_LIST_PRUNED" xml:space="preserve">
    <value>List pruned, ready to get history?</value>
  </data>
  <data name="SYMBOLINFO_TOSTRING_TEMPLATE" xml:space="preserve">
    <value>Order = {0}, Label = {1}</value>
    <comment>The ToString  override method on SymbolInfo uses this template to represent the property values; this is how they appear in a watch window.</comment>
  </data>
  <data name="TPL_API_FUNCTION_MAP_TOSTRING" xml:space="preserve">
    <value>Function = {0}, Parameter = {1}</value>
    <comment>The ToString override method on FunctionMap uses this template to represent the property values; this is how they appear in a watch window.</comment>
  </data>
  <data name="TPL_BESTMATCH_TOSTRING" xml:space="preserve">
    <value>_1symbol (Symbol) = {0}, _2name (Name) = {1}, _3type (Type) = {2}, _4region (Region) = {3}, _5marketOpen (Market Opening Time) = {4}, _6marketClose (Market Closing Time) = {5}, _7timezone (Time Zone) = {6}, _8currency (Currency) = {7}, __9matchScore (Match Score) = {8}</value>
    <comment>The ToString override method on BestMatch this template to represent the property values; this is how they appear in a watch window.</comment>
  </data>
  <data name="TPL_INTERNAL_ERROR_001" xml:space="preserve">
    <value>INTERNAL ERROR 001: Internal field counter intColIndex has an invalid value of {0}. Its value must always be less than {1}.</value>
    <comment>The indicated exception uses this template to set its Message property.</comment>
  </data>
  <data name="TPL_TICKER_SYMBOL_TOSTRING" xml:space="preserve">
    <value>Symbol = {0}, Issuer Name = {1}, Selected {2}</value>
    <comment>The ToString override method on TickerSymbol uses this template to represent the property values; this is how they appear in a watch window.</comment>
  </data>
  <data name="XLS_R1_C1_LABEL" xml:space="preserve">
    <value>Disposition</value>
    <comment>Label for origin cell</comment>
  </data>
  <data name="XLS_ROW_DISP_DISCARD" xml:space="preserve">
    <value>Discard</value>
    <comment>Initial text for column 1 of each row</comment>
  </data>
  <data name="XLS_ROW_DISP_KEEP" xml:space="preserve">
    <value>Keep</value>
    <comment>Replacement text for column 1 of each row</comment>
  </data>
</root>